/**
 * NotebookRequest.java Created by Florian Hauck on 01.03.2013
 */
package com.dhbw_db.view.student;

import java.util.Date;
import java.util.List;
import java.util.Map;

import com.dhbw_db.control.MainController;
import com.dhbw_db.control.NotebookRequestController;
import com.dhbw_db.model.beans.Notebook.NotebookCategory;
import com.dhbw_db.model.beans.User;
import com.dhbw_db.model.request.Request;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Validator.InvalidValueException;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.ui.Button;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.Label;
import com.vaadin.ui.OptionGroup;
import com.vaadin.ui.Panel;
import com.vaadin.ui.PopupDateField;
import com.vaadin.ui.TextArea;

/**
 * The layout for the notebook request page. Defines all components and their
 * positions. Expects three String arrays, to add the items of the notebook
 * option group, the lecturer combo box and the OS combo box.
 * 
 * @author Florian Hauck
 * @author jhoppmann
 * @version 0.1
 * @since 0.1
 */
public class NotebookRequest extends CustomComponent {

	private static final long serialVersionUID = 7982379886303080108L;

	@AutoGenerated
	private AbsoluteLayout mainLayout;

	@AutoGenerated
	private Panel panel;

	@AutoGenerated
	private AbsoluteLayout panelLayout;

	@AutoGenerated
	private Button requestButton;

	@AutoGenerated
	private Button removeButton;

	@AutoGenerated
	private PopupDateField endDatePopupDateField;

	@AutoGenerated
	private PopupDateField startDatePopupDateField;

	@AutoGenerated
	private TextArea commentTextArea;

	@AutoGenerated
	private ComboBox lecturerComboBox;

	@AutoGenerated
	private ComboBox oSComboBox;

	@AutoGenerated
	private OptionGroup notebookOptionGroup;

	@AutoGenerated
	private Label headlineLabel;

	NotebookRequestController control;

	private Map<NotebookCategory, Integer> notebooks;

	private List<User> lecturers;

	private Map<Integer, String> operatingSystems;

	/**
	 * The constructor should first build the main layout, set the composition
	 * root and then add items to the notebook option group, the lecturers combo
	 * box and the OS combo box.
	 */
	public NotebookRequest() {
		control = new NotebookRequestController(this);
		buildMainLayout();
		setCompositionRoot(mainLayout);

		notebooks = control.getNotebooks();
		operatingSystems = control.getOperatingSystems();
		lecturers = control.getApprovers();

		addNotebookOptions();
		addOperatingSystems();
		addLecturers();

		startDatePopupDateField.setValue(new Date());
	}

	/**
	 * Builds the main layout and adds a new panel to it. The panel is needed to
	 * get a scroll bar.
	 * 
	 * @return The main layout which contains a panel which contains an absolute
	 *         layout with all components.
	 */
	@AutoGenerated
	private AbsoluteLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new AbsoluteLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");

		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");

		// panel
		panel = buildPanel();
		mainLayout.addComponent(panel, "top:0.0px;");

		return mainLayout;
	}

	/**
	 * Builds a panel and adds a new absolute layout to the panel.
	 * 
	 * @return The panel which contains an absolute layout with all components.
	 */
	@AutoGenerated
	private Panel buildPanel() {
		// common part: create layout
		panel = new Panel();
		panel.setImmediate(false);
		panel.setWidth("100.0%");
		panel.setHeight("100.0%");

		// panelLayout
		panelLayout = buildPanelLayout();
		panel.setContent(panelLayout);

		return panel;
	}

	/**
	 * Builds an absolute layout and adds all components to that layout.
	 * 
	 * @return The absolute layout which contains all components.
	 */
	@AutoGenerated
	private AbsoluteLayout buildPanelLayout() {
		// common part: create layout
		panelLayout = new AbsoluteLayout();
		panelLayout.setImmediate(false);
		// to get the scroll bar the size should not be full size
		panelLayout.setWidth("300px");
		panelLayout.setHeight("500px");

		// headlineLabel
		headlineLabel = new Label();
		headlineLabel.setStyleName("headline");
		headlineLabel.setImmediate(false);
		headlineLabel.setWidth("-1px");
		headlineLabel.setHeight("-1px");
		headlineLabel.setValue("Neuer Leihantrag");
		panelLayout.addComponent(headlineLabel, "top:20.0px;left:20.0px;");

		// notebookOptionGroup
		notebookOptionGroup = new OptionGroup();
		notebookOptionGroup.setCaption("Ausleihger채te");
		notebookOptionGroup.setImmediate(true);
		notebookOptionGroup.setNullSelectionAllowed(false);
		notebookOptionGroup.setRequired(true);
		notebookOptionGroup.setWidth("450px");
		notebookOptionGroup.setHeight("60px");
		notebookOptionGroup.addValueChangeListener(control);
		panelLayout.addComponent(notebookOptionGroup, "top:70.0px;left:20.0px;");

		// oSComboBox
		oSComboBox = new ComboBox();
		oSComboBox.setCaption("Betriebssystem");
		oSComboBox.setImmediate(false);
		oSComboBox.setNullSelectionAllowed(false);
		oSComboBox.setRequired(true);
		oSComboBox.setWidth("-1px");
		oSComboBox.setHeight("-1px");
		panelLayout.addComponent(oSComboBox, "top:150.0px;left:20.0px;");

		// lecturerComboBox
		lecturerComboBox = new ComboBox();
		lecturerComboBox.setCaption("Betreuer");
		lecturerComboBox.setImmediate(false);
		lecturerComboBox.setNullSelectionAllowed(false);
		lecturerComboBox.setRequired(true);
		lecturerComboBox.setWidth("-1px");
		lecturerComboBox.setHeight("-1px");
		panelLayout.addComponent(lecturerComboBox, "top:200.0px;left:20.0px;");

		// commentTextArea
		commentTextArea = new TextArea();
		commentTextArea.setCaption("Bemerkung f체r den Betreuer");
		commentTextArea.setImmediate(false);
		commentTextArea.setWidth("-1px");
		commentTextArea.setHeight("-1px");
		panelLayout.addComponent(commentTextArea, "top:250.0px;left:20.0px;");

		// startDatePopupDateField
		startDatePopupDateField = new PopupDateField();
		startDatePopupDateField.setCaption("Ausleihdatum");
		startDatePopupDateField.setDateFormat("yyyy-MM-dd");
		startDatePopupDateField.setImmediate(true);
		startDatePopupDateField.setWidth("-1px");
		startDatePopupDateField.setHeight("-1px");
		startDatePopupDateField.setRequired(true);
		startDatePopupDateField.setTextFieldEnabled(false);
		startDatePopupDateField.addValueChangeListener(control);
		panelLayout.addComponent(	startDatePopupDateField,
									"top:370.0px;left:20.0px;");

		// endDatePopupDateField
		endDatePopupDateField = new PopupDateField();
		endDatePopupDateField.setCaption("R체ckgabedatum");
		endDatePopupDateField.setDateFormat("yyyy-MM-dd");
		endDatePopupDateField.setImmediate(true);
		endDatePopupDateField.setWidth("-1px");
		endDatePopupDateField.setHeight("-1px");
		endDatePopupDateField.setRequired(true);
		endDatePopupDateField.setTextFieldEnabled(false);
		endDatePopupDateField.addValueChangeListener(control);
		panelLayout.addComponent(	endDatePopupDateField,
									"top:420.0px;left:20.0px;");

		// removeButton
		removeButton = new Button();
		removeButton.setCaption("Zur체cksetzen");
		removeButton.setImmediate(true);
		removeButton.setWidth("-1px");
		removeButton.setHeight("-1px");
		removeButton.addClickListener(control);
		panelLayout.addComponent(removeButton, "top:460.0px;left:20.0px;");

		// requestButton
		requestButton = new Button();
		requestButton.setCaption("Beantragen");
		requestButton.setImmediate(true);
		requestButton.setWidth("-1px");
		requestButton.setHeight("-1px");
		requestButton.addClickListener(control);
		panelLayout.addComponent(requestButton, "top:460.0px;left:140.0px;");

		return panelLayout;
	}

	/**
	 * Adds the notebooks as items to the notebook option group.
	 * 
	 * @param notebooks
	 */
	private void addNotebookOptions() {
		for (NotebookCategory nbc : notebooks.keySet()) {
			notebookOptionGroup.addItem(nbc);
			notebookOptionGroup.setItemCaption(nbc, nbc.getText() + " ("
					+ notebooks.get(nbc) + ")");
			// hack
			notebookOptionGroup.setValue(nbc);
		}
	}

	/**
	 * Adds the operating systems as items to the OS combo box.
	 * 
	 * @param operatingSystems
	 */
	private void addOperatingSystems() {
		for (Integer osID : operatingSystems.keySet()) {
			oSComboBox.addItem(osID);
			oSComboBox.setItemCaption(osID, operatingSystems.get(osID));
		}
	}

	/**
	 * Adds the lecturers as items to the lecturer combo box.
	 * 
	 * @param lecturers
	 */
	private void addLecturers() {
		for (User u : lecturers) {
			lecturerComboBox.addItem(u.getID());
			lecturerComboBox.setItemCaption(u.getID(), u.getLastName() + ", "
					+ u.getFirstName());
		}
	}

	/**
	 * Clears all elements
	 */
	public void reset() {
		commentTextArea.setValue("");
		endDatePopupDateField.setValue(null);
		startDatePopupDateField.setValue(new Date());
		lecturerComboBox.select(null);
		notebookOptionGroup.select(null);
		oSComboBox.select(null);
	}

	/**
	 * Constructs a request from the selected values and returns it
	 * 
	 * @return A request with the selected values
	 */
	public Request getRequest() {
		try {
			endDatePopupDateField.validate();
			startDatePopupDateField.validate();
			lecturerComboBox.validate();
			oSComboBox.validate();
			notebookOptionGroup.validate();

			Request r = new Request(MainController.get()
													.getUser()
													.getID(),
									(Integer) lecturerComboBox.getValue());
			r.setStart(startDatePopupDateField.getValue());
			r.setDescription(commentTextArea.getValue());
			r.setUntil(endDatePopupDateField.getValue());
			r.setOs((Integer) oSComboBox.getValue());
			r.setCategory((NotebookCategory) notebookOptionGroup.getValue());
			r.setNotebookId(MainController.get()
											.getDataAccess()
											.getANotebook()
											.getiD());
			return r;
		} catch (InvalidValueException e) {
		}

		return null;
	}

	public Date getStartDate() {
		return startDatePopupDateField.getValue();
	}

	public Date getEndDate() {
		return endDatePopupDateField.getValue();
	}

	public void setEndDate(Date end) {
		endDatePopupDateField.setValue(end);
	}

	public NotebookCategory getCategory() {
		return (NotebookCategory) notebookOptionGroup.getValue();
	}

}
